import random
from deap import base, creator, tools

# Problem parameters
INDIVIDUAL_SIZE, POPULATION_SIZE, N_GENERATIONS = 100, 300, 50
MUTATION_RATE, CROSSOVER_RATE = 0.02, 0.8

# Create fitness and individual classes
creator.create('FitnessMax', base.Fitness, weights=(1.0,))
creator.create('Individual', list, fitness=creator.FitnessMax)

# Create the toolbox
toolbox = base.Toolbox()
toolbox.register('binary', random.randint, 0, 1)
toolbox.register('individual', tools.initRepeat, creator.Individual, toolbox.binary, n=INDIVIDUAL_SIZE)
toolbox.register('population', tools.initRepeat, list, toolbox.individual)

# Modified evaluation function that accepts an individual
def evaluate(individual):
    return sum(individual)/len(individual),  # Fitness is average of bits

toolbox.register('evaluate', evaluate)  # Changed from random.random
toolbox.register('mate', tools.cxTwoPoint)
toolbox.register('mutate', tools.mutFlipBit, indpb=MUTATION_RATE)
toolbox.register('select', tools.selTournament, tournsize=3)

def main():
    population = toolbox.population(n=POPULATION_SIZE)
    fitnesses = list(map(toolbox.evaluate, population))
    for ind, fit in zip(population, fitnesses):
        ind.fitness.values = fit

    for gen in range(N_GENERATIONS):
        offspring = list(map(toolbox.clone, toolbox.select(population, len(population))))
        
        for child1, child2 in zip(offspring[::2], offspring[1::2]):
            if random.random() < CROSSOVER_RATE:
                toolbox.mate(child1, child2)
                del child1.fitness.values
                del child2.fitness.values

        for mutant in offspring:
            if random.random() < MUTATION_RATE:
                toolbox.mutate(mutant)
                del mutant.fitness.values

        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit

        population[:] = offspring
        max_fitness = max(ind.fitness.values[0] for ind in population if ind.fitness.valid)
        print(f"Generation {gen}: Max_fitness = {max_fitness}")

if __name__ == '__main__':
    main()
