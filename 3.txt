class Uniqueword():
    def __init__(self, filename):  # Fixed constructor name
        with open(filename, 'r') as f:
            self.data = f.read().strip()
    
    def mapper(self):
        self.words = self.data.split()  # split() without arg handles multiple spaces
    
    def reducer(self):
        unique_words = set(self.words)
        for word in unique_words:
            print(word)

# Usage (outside class)
word_processor = Uniqueword('words.txt')
word_processor.mapper()
word_processor.reducer()

class Counting():  # Fixed class name convention
    def __init__(self, filename):
        with open(filename, 'r') as f:
            self.data = f.read().strip()
    
    def mapper(self):
        self.chars = list(self.data)  # Convert string to character list
    
    def reducer(self):
        count = {}
        for char in self.chars:
            if char in count:
                count[char] += 1
            else:
                count[char] = 1
        for char, cnt in count.items():  # Proper dictionary iteration
            print(f"'{char}': {cnt}")

# Usage
counter = Counting('words.txt')
counter.mapper()
counter.reducer()
